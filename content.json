{"meta":{"title":"似水年华","subtitle":"明月百年心","description":null,"author":"Steven Su","url":"https://www.sugen.cn","root":"/"},"pages":[{"title":"404 Not Found：该页无法显示","date":"2019-06-23T05:35:05.196Z","updated":"2019-06-23T05:35:05.196Z","comments":false,"path":"/404.html","permalink":"https://www.sugen.cn//404.html","excerpt":"","text":""},{"title":"关于","date":"2019-06-23T09:12:35.797Z","updated":"2019-06-23T09:12:35.797Z","comments":false,"path":"about/index.html","permalink":"https://www.sugen.cn/about/index.html","excerpt":"","text":"本人涉猎广泛，鲜有专精，十分汗颜。英文名 Steven. 职业： – 老板– 销售– 技术 有点悲观主义，有点理想主义。 特别想改变自己，宁可十年不将军，不可一日不拱卒，一直在自己目标的路上奔跑！"},{"title":"all-tags","date":"2019-06-23T10:45:54.932Z","updated":"2019-06-23T10:45:54.932Z","comments":false,"path":"all-tags/index.html","permalink":"https://www.sugen.cn/all-tags/index.html","excerpt":"","text":""},{"title":"all-categories","date":"2019-06-23T10:46:53.778Z","updated":"2019-06-23T10:46:53.778Z","comments":false,"path":"all-categories/index.html","permalink":"https://www.sugen.cn/all-categories/index.html","excerpt":"","text":""},{"title":"all-archives","date":"2019-06-23T10:47:18.132Z","updated":"2019-06-23T10:47:18.132Z","comments":false,"path":"all-archives/index.html","permalink":"https://www.sugen.cn/all-archives/index.html","excerpt":"","text":""},{"title":"书单","date":"2019-06-22T15:33:30.794Z","updated":"2019-06-22T15:33:30.793Z","comments":false,"path":"books/index.html","permalink":"https://www.sugen.cn/books/index.html","excerpt":"","text":""},{"title":"分类","date":"2019-06-23T05:32:41.639Z","updated":"2019-06-23T05:32:41.639Z","comments":false,"path":"categories/index.html","permalink":"https://www.sugen.cn/categories/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2019-06-22T16:14:47.291Z","updated":"2019-06-22T16:14:47.290Z","comments":true,"path":"links/index.html","permalink":"https://www.sugen.cn/links/index.html","excerpt":"","text":""},{"title":"Repositories","date":"2019-06-22T15:37:49.317Z","updated":"2019-06-22T15:37:49.316Z","comments":false,"path":"repository/index.html","permalink":"https://www.sugen.cn/repository/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-06-23T05:32:55.686Z","updated":"2019-06-23T05:32:55.686Z","comments":false,"path":"tags/index.html","permalink":"https://www.sugen.cn/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"SSH协议远程免密登录","slug":"sshlogin","date":"2019-06-23T04:09:58.000Z","updated":"2019-06-23T15:34:25.654Z","comments":false,"path":"article-20190623120958.html","link":"","permalink":"https://www.sugen.cn/article-20190623120958.html","excerpt":"SSH（用于Secure SHell）是指计算机软件和通信协议。 该协议还具有完全加密的特性。 这意味着您通过SSH执行的所有命令都将完全保密！","text":"SSH（用于Secure SHell）是指计算机软件和通信协议。 该协议还具有完全加密的特性。 这意味着您通过SSH执行的所有命令都将完全保密！ 一、什么是SSH？ 简单说，SSH是一种网络协议，用于计算机之间的加密登录。 如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。 最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。 需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。 此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件PuTTY，这需要另文介绍。 二、最基本的用法SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。1$ ssh root@43.82.79.168 如果本地用户名与远程用户名一致，登录时可以省略用户名。1$ ssh 43.82.79.168 SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。1$ ssh -p 2222 root@43.82.79.168 上面这条命令表示，ssh直接连接远程主机的2222端口。三、中间人攻击 SSH之所以能够保证安全，原因在于它采用了公钥加密。 整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。 这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。 可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。 SSH协议是如何应对的呢？ 四、口令登录如果你是第一次登录对方主机，系统会出现下面的提示：1234567$ ssh root@43.82.79.168&gt; The authenticity of host 'host (12.18.429.21)' can't be established.&gt; RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.&gt; Are you sure you want to continue connecting (yes/no)? 这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？ 所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。 很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。 假定经过风险衡量以后，用户决定接受这个远程主机的公钥。 1&gt; Are you sure you want to continue connecting (yes/no)? yes 系统会出现一句提示，表示43.82.79.168主机已经得到认可。1&gt; Warning: Permanently added 'host,12.18.429.21' (RSA) to the list of known hosts. 然后，会要求输入密码。1&gt; Password: (enter password) 如果密码正确，就可以登录了。当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。 每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。 五、公钥登录 使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。 所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。 这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个（在我以前的文章中有详细步骤）： 1$ ssh-keygen 运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。 运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。 这时再输入下面的命令，将公钥传送到远程主机host上面： 1$ ssh-copy-id root@43.82.79.168 好了，从此你再登录，就不需要输入密码了。 如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。 123RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 然后，重启远程主机的ssh服务。 12345// ubuntu系统$ service ssh restart// debian系统$ /etc/init.d/ssh restart 六、authorized_keys文件远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。 这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程： 1$ ssh root@43.82.79.168 'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys' &lt; ~/.ssh/id_rsa.pub 这条命令由多个语句组成，依次分解开来看：（1）”$ ssh root@43.82.79.168“，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）”$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）’cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件 ~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。 写入authorized_keys文件后，公钥登录的设置就完成了。 如果还有问题看一下，为〜/.ssh目录和authorized_keys文件提供文件权限： 1chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/authorized_keys","categories":[{"name":"ssh","slug":"ssh","permalink":"https://www.sugen.cn/categories/ssh/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://www.sugen.cn/tags/ssh/"}]},{"title":"一台电脑多个Hexo博客网站github发布","slug":"blog","date":"2019-06-21T16:00:00.000Z","updated":"2019-06-23T15:45:14.150Z","comments":false,"path":"article-20190622.html","link":"","permalink":"https://www.sugen.cn/article-20190622.html","excerpt":"Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案","text":"Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案 今天在弄Hexo自动发布到github的时候，遇到了点小麻烦，总结了一下，终于找到解决方案！报错如下： 123ERROR: Permission to sugen/sugen.github.io.git denied to biancard.fatal: Could not read from remote repository.Please make sure you have the correct access rights and the repository exists. 初看知道大概是没有权限，导致不能从远程仓库读取，电脑SSH公钥已经绑定了一个GitHub账号，我就不能再用他的公钥了，具体的请看stackoverflow网友所说的： 123GitHub will use the key as means to identify you when you connect to them via SSH. As such, you cannot have multiple accounts with the same key, as GitHub won’t be able to tell then which of your accounts you want to use. 上面说的话很清楚，就是你不能有多个账号添加了同一个公钥，一旦那样github就不能区分到底是哪个用户在安全登陆网站，那安全登录就起不到任何效果了，因为你能登进去，我也能登进去，那服务器到底判断是谁登了呢！但是要注意一个账号可以拥有多个公钥，这个是可以允许的！比如，在A电脑和B电脑上的公钥都绑定了同个一个账户Steven，那么两台电脑在终端上输入ssh -T git@github.com最后都会显示 12$ ssh -T git@github.comHi Steven! You've successfully authenticated, but GitHub does not provide shell access. 解决办法一台电脑生成多公钥，每个公钥对应一个github仓库 解决方案1、生成一个新的SSH KEY1$ ssh-keygen -t rsa -b 4096 -C \"your_email@example.com\" 使用电子邮件作为标签创建一个新的ssh密钥。 1&gt; Generating public/private rsa key pair. 当提示“输入文件以保存密钥”时，记得为新的key重新命名。 这接受默认文件位置。 12&gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter]&gt; /Users/you/.ssh/github_rsa 在提示符下，键入安全密码(建议不要设置，直接回车)。 12&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]&gt; Enter same passphrase again: [Type passphrase again] 2、将SSH密钥添加到ssh-agent在将新的SSH密钥添加到ssh-agent以管理密钥之前，您应该检查现有的SSH密钥并生成新的SSH密钥。 将SSH密钥添加到代理时，请使用默认的macOS ssh-add命令，而不是macports，homebrew或其他外部源安装的应用程序。 1, 在后台启动ssh-agent。 12$ eval \"$(ssh-agent -s)\"&gt; Agent pid 59566 将SSH私钥添加到ssh-agent并将密码存储在密钥链中。 如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的github_rsa替换为私钥文件的名称。 1$ ssh-add -K ~/.ssh/github_rsa 编辑修改〜/.ssh/config，没有config文件则vi编辑后保存会自动创建，或者终端输入touch config，创建完以后用vi打开或者是在Finder打开一样。在不影响默认的github设置下我们重新添加一个Host，建一个自己能辨识的github别名，我取的是github-rsa，新建的帐号使用这个别名做克隆和更新 1$ vi 〜/.ssh/config 加上如下一段代码 1234Host github-rsa.comHostName github.comUser gitIdentityFile ~/.ssh/github_rsa 编辑完毕之后按下ESC，:x，:x是保存并退出vi编辑器用cat 〜/.ssh/config 查看刚刚编辑的文件，具体在终端代码如下： 1$ cat 〜/.ssh/config 123456789Host github.comHostName github.comUser gitIdentityFile ~/.ssh/id_rsaHost github-rsa.comHostName github.comUser gitIdentityFile ~/.ssh/github_rsa 3、将github_rsa.pub密钥添加到您的GitHub帐户, 不知道怎么加，请看我上一条博客4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。如原地址是 git@github.com:sugen/comments.git 替换后应该是：git@github-rsa.com:sugen/comments.git 或者github-rsa:sugen/comments.git 都是可以的，如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：进入到GITHUB仓库目录下 1$ cd /Users/steven/Project/sugen.cn 修改之前 1234$ git remote -v&gt; github git@github.com:sugen/comments.git (fetch)&gt; github git@github.com:sugen/comments.git (push) 修改 remote set-url 1$ git remote set-url github git@github-rsa.com:sugen/comments.git 验证是否修改成功，使用修改后的github-rsa SSH连接，连接成功用户是sugen，此时公钥是github_rsa 12$ ssh -T github-rsa&gt; Hi sugen! You've successfully authenticated, but GitHub does not provide shell access. 使用默认的git@github.com SSH去连接,连接成功用户是steven，此时公钥是id_rsa 12$ ssh -T git@github.com&gt; Hi steven! You've successfully authenticated, but GitHub does not provide shell access. 至此github可以正常使用了，这样，一台电脑生成的两个公钥让两个用户成功连接，也就可以访问别人的远程仓库，可以进行多人开发了！！","categories":[{"name":"github","slug":"github","permalink":"https://www.sugen.cn/categories/github/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://www.sugen.cn/tags/hexo/"},{"name":"github","slug":"github","permalink":"https://www.sugen.cn/tags/github/"}]},{"title":"怎么将SSH密钥添加到GitHub帐户","slug":"github","date":"2019-06-21T16:00:00.000Z","updated":"2019-06-23T15:39:42.356Z","comments":false,"path":"article-2019062211.html","link":"","permalink":"https://www.sugen.cn/article-2019062211.html","excerpt":"为了避免每次输入Github用户名和密码的麻烦，将现有SSH密钥添加到GITHUB，只需按照这些步骤操作即可立即设置您的ssh密钥。","text":"为了避免每次输入Github用户名和密码的麻烦，将现有SSH密钥添加到GITHUB，只需按照这些步骤操作即可立即设置您的ssh密钥。 1、将SSH密钥复制到剪贴板。12$ pbcopy &lt; ~/.ssh/id_rsa.pub# Copies the contents of the id_rsa.pub file to your clipboard 2、在任意页面的右上角，单击您的个人资料照片，然后单击“设置”。 3、在用户设置侧栏中，单击SSH和GPG密钥。 4、单击“新建SSH密钥”或“添加SSH密钥”。 5、在“标题”字段中，为新密钥添加描述性标签。 例如，如果您使用的是个人Mac，则可以将此键称为“Personal MacBook Air”。 6、将您的密钥粘贴到“密钥”字段中。 7、单击“添加SSH密钥”。 8、如果出现提示，确认你的GitHub密码。","categories":[{"name":"github","slug":"github","permalink":"https://www.sugen.cn/categories/github/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://www.sugen.cn/tags/ssh/"}]},{"title":"生成新的SSH密钥并将其添加到ssh-agent","slug":"sshkey","date":"2019-06-21T16:00:00.000Z","updated":"2019-06-23T15:44:05.765Z","comments":false,"path":"article-2019062301.html","link":"","permalink":"https://www.sugen.cn/article-2019062301.html","excerpt":"使用SSH协议，您可以连接和验证远程服务器和服务。您可以连接到GitHub，而无需在每次访问时提供用户名或密码，接下来教您怎么使用SSH密钥。","text":"使用SSH协议，您可以连接和验证远程服务器和服务。您可以连接到GitHub，而无需在每次访问时提供用户名或密码，接下来教您怎么使用SSH密钥。 开始之前123451. 检查现有SSH密钥后，可以生成用于身份验证的新SSH密钥，然后将其添加到ssh-agent。2. 如果您还没有SSH密钥，则必须生成新的SSH密钥。 如果您不确定是否已有SSH密钥，请检查现有密钥。3. 如果您不想在每次使用SSH密钥时重新输入密码，则可以将密钥添加到SSH代理，SSH代理管理您的SSH密钥并记住您的密码。 生成新的SSH密钥1. 打开终端2. 粘贴下面的文本，替换您的GitHub电子邮件地址。1$ ssh-keygen -t rsa -b 4096 -C“your_email@example.com” 这将使用提供的电子邮件作为标签创建一个新的ssh密钥。1&gt; Generating public/private rsa key pair. 3. 当系统提示“输入要保存密钥的文件”时，按Enter键。这接受默认文件位置，如果不想覆盖，可以手动修改文件名。1&gt; Enter a file in which to save the key (/Users/you/.ssh/id_rsa): [Press enter] 4. 在提示符下，键入安全密码(可以直接回车不设置密码)。12&gt; Enter passphrase (empty for no passphrase): [Type a passphrase]&gt; Enter same passphrase again: [Type passphrase again] 将SSH密钥添加到ssh-agent121. 在将新的SSH密钥添加到ssh-agent以管理密钥之前，您应该检查现有的SSH密钥并生成新的SSH密钥。2. 将SSH密钥添加到代理时，请使用默认的macOS ssh-add命令，而不是macports，homebrew或其他外部源安装的应用程序。 1. 在后台启动ssh-agent。12$ eval \"$(ssh-agent -s)\"&gt; Agent pid 59566 2. 如果您使用的是macOS Sierra 10.12.2或更高版本，则需要修改〜/.ssh/config文件以自动将密钥加载到ssh-agent中并在密钥链中存储密码。1234Host * AddKeysToAgent yes UseKeychain yes IdentityFile ~/.ssh/id_rsa 3. 将SSH私钥添加到ssh-agent并将密码存储在密钥链中。 如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的id_rsa替换为私钥文件的名称。1$ ssh-add -K ~/.ssh/id_rsa 注意：-K选项是Apple的ssh-add标准版本，当你向ssh-agent添加ssh密钥时，它会将密码链存储在你的钥匙串中。如果你没有安装Apple的标准版本，则可能会收到错误消息。 4. 将SSH密钥添加到您的GitHub帐户。(不会的看下一篇文章)","categories":[{"name":"ssh","slug":"ssh","permalink":"https://www.sugen.cn/categories/ssh/"}],"tags":[{"name":"ssh","slug":"ssh","permalink":"https://www.sugen.cn/tags/ssh/"}]}]}