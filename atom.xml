<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>似水年华</title>
  
  <subtitle>明月百年心</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.sugen.cn/"/>
  <updated>2019-06-23T15:07:40.654Z</updated>
  <id>https://www.sugen.cn/</id>
  
  <author>
    <name>Steven Su</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SSH协议远程免密登录</title>
    <link href="https://www.sugen.cn/article-20190623120958.html"/>
    <id>https://www.sugen.cn/article-20190623120958.html</id>
    <published>2019-06-23T04:09:58.000Z</published>
    <updated>2019-06-23T15:07:40.654Z</updated>
    
    <content type="html"><![CDATA[<p>SSH是一种网络协议，用于计算机之间的加密登录</p><a id="more"></a><h3 id="一、什么是SSH？"><a href="#一、什么是SSH？" class="headerlink" title="一、什么是SSH？"></a>一、什么是SSH？</h3><hr><ol><li><p>简单说，SSH是一种网络协议，用于计算机之间的加密登录。</p></li><li><p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p></li><li><p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p></li><li><p>需要指出的是，SSH只是一种协议，存在多种实现，既有商业实现，也有开源实现。本文针对的实现是OpenSSH，它是自由软件，应用非常广泛。</p></li><li><p>此外，本文只讨论SSH在Linux Shell中的用法。如果要在Windows系统中使用SSH，会用到另一种软件PuTTY，这需要另文介绍。</p></li></ol><hr><h3 id="二、最基本的用法"><a href="#二、最基本的用法" class="headerlink" title="二、最基本的用法"></a>二、最基本的用法</h3><h5 id="SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。"><a href="#SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。" class="headerlink" title="SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。"></a>SSH主要用于远程登录。假定你要以用户名user，登录远程主机host，只要一条简单命令就可以了。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@43.82.79.168</span><br></pre></td></tr></table></figure><h5 id="如果本地用户名与远程用户名一致，登录时可以省略用户名。"><a href="#如果本地用户名与远程用户名一致，登录时可以省略用户名。" class="headerlink" title="如果本地用户名与远程用户名一致，登录时可以省略用户名。"></a>如果本地用户名与远程用户名一致，登录时可以省略用户名。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh 43.82.79.168</span><br></pre></td></tr></table></figure><h5 id="SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。"><a href="#SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。" class="headerlink" title="SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。"></a>SSH的默认端口是22，也就是说，你的登录请求会送进远程主机的22端口。使用p参数，可以修改这个端口。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -p 2222 root@43.82.79.168</span><br></pre></td></tr></table></figure><h5 id="上面这条命令表示，ssh直接连接远程主机的2222端口。"><a href="#上面这条命令表示，ssh直接连接远程主机的2222端口。" class="headerlink" title="上面这条命令表示，ssh直接连接远程主机的2222端口。"></a>上面这条命令表示，ssh直接连接远程主机的2222端口。</h5><h3 id="三、中间人攻击"><a href="#三、中间人攻击" class="headerlink" title="三、中间人攻击"></a>三、中间人攻击</h3><ol><li><p>SSH之所以能够保证安全，原因在于它采用了公钥加密。</p></li><li><p>整个过程是这样的：（1）远程主机收到用户的登录请求，把自己的公钥发给用户。（2）用户使用这个公钥，将登录密码加密后，发送回来。（3）远程主机用自己的私钥，解密登录密码，如果密码正确，就同意用户登录。</p></li><li><p>这个过程本身是安全的，但是实施的时候存在一个风险：如果有人截获了登录请求，然后冒充远程主机，将伪造的公钥发给用户，那么用户很难辨别真伪。因为不像https协议，SSH协议的公钥是没有证书中心（CA）公证的，也就是说，都是自己签发的。</p></li><li><p>可以设想，如果攻击者插在用户与远程主机之间（比如在公共的wifi区域），用伪造的公钥，获取用户的登录密码。再用这个密码登录远程主机，那么SSH的安全机制就荡然无存了。这种风险就是著名的”中间人攻击”（Man-in-the-middle attack）。</p></li><li><p>SSH协议是如何应对的呢？</p></li></ol><h3 id="四、口令登录"><a href="#四、口令登录" class="headerlink" title="四、口令登录"></a>四、口令登录</h3><h5 id="如果你是第一次登录对方主机，系统会出现下面的提示："><a href="#如果你是第一次登录对方主机，系统会出现下面的提示：" class="headerlink" title="如果你是第一次登录对方主机，系统会出现下面的提示："></a>如果你是第一次登录对方主机，系统会出现下面的提示：</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@43.82.79.168</span><br><span class="line"></span><br><span class="line">&gt; The authenticity of host <span class="string">'host (12.18.429.21)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; RSA key fingerprint is 98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&gt; Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>这段话的意思是，无法确认host主机的真实性，只知道它的公钥指纹，问你还想继续连接吗？</p><p>所谓”公钥指纹”，是指公钥长度较长（这里采用RSA算法，长达1024位），很难比对，所以对其进行MD5计算，将它变成一个128位的指纹。上例中是98:2e:d7:e0:de:9f:ac:67:28:c2:42:2d:37:16:58:4d，再进行比较，就容易多了。</p><p>很自然的一个问题就是，用户怎么知道远程主机的公钥指纹应该是多少？回答是没有好办法，远程主机必须在自己的网站上贴出公钥指纹，以便用户自行核对。</p><p>假定经过风险衡量以后，用户决定接受这个远程主机的公钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Are you sure you want to <span class="built_in">continue</span> connecting (yes/no)? yes</span><br></pre></td></tr></table></figure><h5 id="系统会出现一句提示，表示43-82-79-168主机已经得到认可。"><a href="#系统会出现一句提示，表示43-82-79-168主机已经得到认可。" class="headerlink" title="系统会出现一句提示，表示43.82.79.168主机已经得到认可。"></a>系统会出现一句提示，表示43.82.79.168主机已经得到认可。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Warning: Permanently added <span class="string">'host,12.18.429.21'</span> (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><h5 id="然后，会要求输入密码。"><a href="#然后，会要求输入密码。" class="headerlink" title="然后，会要求输入密码。"></a>然后，会要求输入密码。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Password: (enter password)</span><br></pre></td></tr></table></figure><h5 id="如果密码正确，就可以登录了。"><a href="#如果密码正确，就可以登录了。" class="headerlink" title="如果密码正确，就可以登录了。"></a>如果密码正确，就可以登录了。</h5><p>当远程主机的公钥被接受以后，它就会被保存在文件$HOME/.ssh/known_hosts之中。下次再连接这台主机，系统就会认出它的公钥已经保存在本地了，从而跳过警告部分，直接提示输入密码。</p><p>每个SSH用户都有自己的known_hosts文件，此外系统也有一个这样的文件，通常是/etc/ssh/ssh_known_hosts，保存一些对所有用户都可信赖的远程主机的公钥。</p><h3 id="五、公钥登录"><a href="#五、公钥登录" class="headerlink" title="五、公钥登录"></a>五、公钥登录</h3><ol><li><p>使用密码登录，每次都必须输入密码，非常麻烦。好在SSH还提供了公钥登录，可以省去输入密码的步骤。</p></li><li><p>所谓”公钥登录”，原理很简单，就是用户将自己的公钥储存在远程主机上。登录的时候，远程主机会向用户发送一段随机字符串，用户用自己的私钥加密后，再发回来。远程主机用事先储存的公钥进行解密，如果成功，就证明用户是可信的，直接允许登录shell，不再要求密码。</p></li><li><p>这种方法要求用户必须提供自己的公钥。如果没有现成的，可以直接用ssh-keygen生成一个（在我以前的文章中有详细步骤）：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen</span><br></pre></td></tr></table></figure><p>运行上面的命令以后，系统会出现一系列提示，可以一路回车。其中有一个问题是，要不要对私钥设置口令（passphrase），如果担心私钥的安全，这里可以设置一个。</p><p>运行结束以后，在$HOME/.ssh/目录下，会新生成两个文件：id_rsa.pub和id_rsa。前者是你的公钥，后者是你的私钥。</p><p>这时再输入下面的命令，将公钥传送到远程主机host上面：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-copy-id root@43.82.79.168</span><br></pre></td></tr></table></figure><p>好了，从此你再登录，就不需要输入密码了。</p><p>如果还是不行，就打开远程主机的/etc/ssh/sshd_config这个文件，检查下面几行前面”#”注释是否取掉。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile .ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>然后，重启远程主机的ssh服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// ubuntu系统</span><br><span class="line">$ service ssh restart</span><br><span class="line"></span><br><span class="line">// debian系统</span><br><span class="line">$ /etc/init.d/ssh restart</span><br></pre></td></tr></table></figure><h3 id="六、authorized-keys文件"><a href="#六、authorized-keys文件" class="headerlink" title="六、authorized_keys文件"></a>六、authorized_keys文件</h3><p>远程主机将用户的公钥，保存在登录后的用户主目录的$HOME/.ssh/authorized_keys文件中。公钥就是一段字符串，只要把它追加在authorized_keys文件的末尾就行了。</p><p>这里不使用上面的ssh-copy-id命令，改用下面的命令，解释公钥的保存过程：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh root@43.82.79.168 <span class="string">'mkdir -p .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys'</span> &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>这条命令由多个语句组成，依次分解开来看：（1）”$ ssh <a href="mailto:root@43.82.79.168" target="_blank" rel="noopener">root@43.82.79.168</a>“，表示登录远程主机；（2）单引号中的mkdir .ssh &amp;&amp; cat &gt;&gt; .ssh/authorized_keys，表示登录后在远程shell上执行的命令：（3）”$ mkdir -p .ssh”的作用是，如果用户主目录中的.ssh目录不存在，就创建一个；（4）’cat &gt;&gt; .ssh/authorized_keys’ &lt; ~/.ssh/id_rsa.pub的作用是，将本地的公钥文件 ~/.ssh/id_rsa.pub，重定向追加到远程文件authorized_keys的末尾。</p><p>写入authorized_keys文件后，公钥登录的设置就完成了。</p><p>如果还有问题看一下，为〜/.ssh目录和authorized_keys文件提供文件权限：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;SSH是一种网络协议，用于计算机之间的加密登录&lt;/p&gt;
    
    </summary>
    
      <category term="ssh" scheme="https://www.sugen.cn/categories/ssh/"/>
    
    
      <category term="ssh" scheme="https://www.sugen.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>一台电脑多个Hexo博客网站github发布</title>
    <link href="https://www.sugen.cn/article-20190622.html"/>
    <id>https://www.sugen.cn/article-20190622.html</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-23T15:27:02.260Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git-最著名报错-“ERROR-Permission-to-XXX-git-denied-to-user”终极解决方案"><a href="#Git-最著名报错-“ERROR-Permission-to-XXX-git-denied-to-user”终极解决方案" class="headerlink" title="Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案"></a>Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案</h2><a id="more"></a><p>今天在弄Hexo自动发布到github的时候，遇到了点小麻烦，总结了一下，终于找到解决方案！报错如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ERROR: Permission to sugen/sugen.github.io.git denied to biancard.</span><br><span class="line">fatal: Could not <span class="built_in">read</span> from remote repository.</span><br><span class="line">Please make sure you have the correct access rights and the repository exists.</span><br></pre></td></tr></table></figure><p>初看知道大概是没有权限，导致不能从远程仓库读取，电脑SSH公钥已经绑定了一个GitHub账号，我就不能再用他的公钥了，具体的请看stackoverflow网友所说的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GitHub will use the key as means to identify you when you connect to them via SSH. </span><br><span class="line">As such, you cannot have multiple accounts with the same key, </span><br><span class="line">as GitHub won’t be able to tell <span class="keyword">then</span> <span class="built_in">which</span> of your accounts you want to use.</span><br></pre></td></tr></table></figure><p>上面说的话很清楚，就是你不能有多个账号添加了同一个公钥，一旦那样github就不能区分到底是哪个用户在安全登陆网站，那安全登录就起不到任何效果了，因为你能登进去，我也能登进去，那服务器到底判断是谁登了呢！但是要注意一个账号可以拥有多个公钥，这个是可以允许的！比如，在A电脑和B电脑上的公钥都绑定了同个一个账户Steven，那么两台电脑在终端上输入ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>最后都会显示</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">Hi Steven! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>一台电脑生成多公钥，每个公钥对应一个github仓库</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h5 id="1、生成一个新的SSH-KEY"><a href="#1、生成一个新的SSH-KEY" class="headerlink" title="1、生成一个新的SSH KEY"></a>1、生成一个新的SSH KEY</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C <span class="string">"your_email@example.com"</span></span><br></pre></td></tr></table></figure><p>使用电子邮件作为标签创建一个新的ssh密钥。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><p>当提示“输入文件以保存密钥”时，记得为新的key重新命名。 这接受默认文件位置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br><span class="line">&gt; /Users/you/.ssh/github_rsa</span><br></pre></td></tr></table></figure><p>在提示符下，键入安全密码(建议不要设置，直接回车)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><h5 id="2、将SSH密钥添加到ssh-agent"><a href="#2、将SSH密钥添加到ssh-agent" class="headerlink" title="2、将SSH密钥添加到ssh-agent"></a>2、将SSH密钥添加到ssh-agent</h5><p>在将新的SSH密钥添加到ssh-agent以管理密钥之前，您应该检查现有的SSH密钥并生成新的SSH密钥。 将SSH密钥添加到代理时，请使用默认的macOS ssh-add命令，而不是macports，homebrew或其他外部源安装的应用程序。</p><p>1, 在后台启动ssh-agent。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure><p>将SSH私钥添加到ssh-agent并将密码存储在密钥链中。 如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的github_rsa替换为私钥文件的名称。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -K ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><p>编辑修改〜/.ssh/config，没有config文件则vi编辑后保存会自动创建，或者终端输入touch config，创建完以后用vi打开或者是在Finder打开一样。在不影响默认的github设置下我们重新添加一个Host，建一个自己能辨识的github别名，我取的是github-rsa，新建的帐号使用这个别名做克隆和更新</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi 〜/.ssh/config</span><br></pre></td></tr></table></figure><p>加上如下一段代码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host github-rsa.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><p>编辑完毕之后按下ESC，:x，:x是保存并退出vi编辑器<br>用cat 〜/.ssh/config 查看刚刚编辑的文件，具体在终端代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cat 〜/.ssh/config</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">Host github-rsa.com</span><br><span class="line">HostName github.com</span><br><span class="line">User git</span><br><span class="line">IdentityFile ~/.ssh/github_rsa</span><br></pre></td></tr></table></figure><h5 id="3、将github-rsa-pub密钥添加到您的GitHub帐户-不知道怎么加，请看我上一条博客"><a href="#3、将github-rsa-pub密钥添加到您的GitHub帐户-不知道怎么加，请看我上一条博客" class="headerlink" title="3、将github_rsa.pub密钥添加到您的GitHub帐户, 不知道怎么加，请看我上一条博客"></a>3、将github_rsa.pub密钥添加到您的GitHub帐户, 不知道怎么加，请看我上一条博客</h5><h5 id="4、将GitHub-SSH仓库地址中的git-github-com替换成新建的Host别名。"><a href="#4、将GitHub-SSH仓库地址中的git-github-com替换成新建的Host别名。" class="headerlink" title="4、将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名。"></a>4、将GitHub SSH仓库地址中的<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>替换成新建的Host别名。</h5><p>如原地址是 <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:sugen/comments.git 替换后应该是：<a href="mailto:git@github-rsa.com" target="_blank" rel="noopener">git@github-rsa.com</a>:sugen/comments.git 或者github-rsa:sugen/comments.git 都是可以的，如果是新建的仓库，直接使用替换后的URL克隆即可。如果已经使用原地址克隆过了，可以使用命令修改：<br>进入到GITHUB仓库目录下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /Users/steven/Project/sugen.cn</span><br></pre></td></tr></table></figure><p>修改之前</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line"></span><br><span class="line">&gt; github  git@github.com:sugen/comments.git (fetch)</span><br><span class="line">&gt; github  git@github.com:sugen/comments.git (push)</span><br></pre></td></tr></table></figure><p>修改 remote set-url</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote <span class="built_in">set</span>-url github  git@github-rsa.com:sugen/comments.git</span><br></pre></td></tr></table></figure><p>验证是否修改成功，使用修改后的github-rsa SSH连接，连接成功用户是sugen，此时公钥是github_rsa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T github-rsa</span><br><span class="line">&gt; Hi sugen! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>使用默认的<a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a> SSH去连接,连接成功用户是steven，此时公钥是id_rsa</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com</span><br><span class="line">&gt; Hi steven! You<span class="string">'ve successfully authenticated, but GitHub does not provide shell access.</span></span><br></pre></td></tr></table></figure><p>至此github可以正常使用了，这样，一台电脑生成的两个公钥让两个用户成功连接，也就可以访问别人的远程仓库，可以进行多人开发了！！</p><!-- ![彼岸点卡](/images/logo-document.png "彼岸点卡") -->]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git-最著名报错-“ERROR-Permission-to-XXX-git-denied-to-user”终极解决方案&quot;&gt;&lt;a href=&quot;#Git-最著名报错-“ERROR-Permission-to-XXX-git-denied-to-user”终极解决方案&quot; class=&quot;headerlink&quot; title=&quot;Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案&quot;&gt;&lt;/a&gt;Git 最著名报错 “ERROR: Permission to XXX.git denied to user”终极解决方案&lt;/h2&gt;
    
    </summary>
    
      <category term="github" scheme="https://www.sugen.cn/categories/github/"/>
    
    
      <category term="hexo" scheme="https://www.sugen.cn/tags/hexo/"/>
    
      <category term="github" scheme="https://www.sugen.cn/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>怎么将SSH密钥添加到GitHub帐户</title>
    <link href="https://www.sugen.cn/article-2019062211.html"/>
    <id>https://www.sugen.cn/article-2019062211.html</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-23T15:26:28.268Z</updated>
    
    <content type="html"><![CDATA[<h2 id="将现有SSH密钥添加到GITHUB"><a href="#将现有SSH密钥添加到GITHUB" class="headerlink" title="将现有SSH密钥添加到GITHUB"></a>将现有SSH密钥添加到GITHUB</h2><a id="more"></a><h3 id="1、将SSH密钥复制到剪贴板。"><a href="#1、将SSH密钥复制到剪贴板。" class="headerlink" title="1、将SSH密钥复制到剪贴板。"></a>1、将SSH密钥复制到剪贴板。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pbcopy &lt; ~/.ssh/id_rsa.pub</span><br><span class="line"><span class="comment"># Copies the contents of the id_rsa.pub file to your clipboard</span></span><br></pre></td></tr></table></figure><h3 id="2、在任意页面的右上角，单击您的个人资料照片，然后单击“设置”。"><a href="#2、在任意页面的右上角，单击您的个人资料照片，然后单击“设置”。" class="headerlink" title="2、在任意页面的右上角，单击您的个人资料照片，然后单击“设置”。"></a>2、在任意页面的右上角，单击您的个人资料照片，然后单击“设置”。</h3><div align="center"><img src="/images/github/userbar-account-settings.png"></div><h3 id="3、在用户设置侧栏中，单击SSH和GPG密钥。"><a href="#3、在用户设置侧栏中，单击SSH和GPG密钥。" class="headerlink" title="3、在用户设置侧栏中，单击SSH和GPG密钥。"></a>3、在用户设置侧栏中，单击SSH和GPG密钥。</h3><div align="center"><img src="/images/github/settings-sidebar-ssh-keys.png"></div><h3 id="4、单击“新建SSH密钥”或“添加SSH密钥”。"><a href="#4、单击“新建SSH密钥”或“添加SSH密钥”。" class="headerlink" title="4、单击“新建SSH密钥”或“添加SSH密钥”。"></a>4、单击“新建SSH密钥”或“添加SSH密钥”。</h3><div align="center"><img src="/images/github/ssh-add-ssh-key.png"></div><h3 id="5、在“标题”字段中，为新密钥添加描述性标签。"><a href="#5、在“标题”字段中，为新密钥添加描述性标签。" class="headerlink" title="5、在“标题”字段中，为新密钥添加描述性标签。"></a>5、在“标题”字段中，为新密钥添加描述性标签。</h3><blockquote><p>例如，如果您使用的是个人Mac，则可以将此键称为“Personal MacBook Air”。</p></blockquote><h3 id="6、将您的密钥粘贴到“密钥”字段中。"><a href="#6、将您的密钥粘贴到“密钥”字段中。" class="headerlink" title="6、将您的密钥粘贴到“密钥”字段中。"></a>6、将您的密钥粘贴到“密钥”字段中。</h3><div align="center"><img src="/images/github/ssh-key-paste.png"></div><h3 id="7、单击“添加SSH密钥”。"><a href="#7、单击“添加SSH密钥”。" class="headerlink" title="7、单击“添加SSH密钥”。"></a>7、单击“添加SSH密钥”。</h3><div align="center"><img src="/images/github/ssh-add-key.png"></div><h3 id="8、如果出现提示，确认你的GitHub密码。"><a href="#8、如果出现提示，确认你的GitHub密码。" class="headerlink" title="8、如果出现提示，确认你的GitHub密码。"></a>8、如果出现提示，确认你的GitHub密码。</h3><div align="center"><img src="/images/github/sudo_mode_popup.png"></div>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;将现有SSH密钥添加到GITHUB&quot;&gt;&lt;a href=&quot;#将现有SSH密钥添加到GITHUB&quot; class=&quot;headerlink&quot; title=&quot;将现有SSH密钥添加到GITHUB&quot;&gt;&lt;/a&gt;将现有SSH密钥添加到GITHUB&lt;/h2&gt;
    
    </summary>
    
      <category term="github" scheme="https://www.sugen.cn/categories/github/"/>
    
    
      <category term="ssh" scheme="https://www.sugen.cn/tags/ssh/"/>
    
  </entry>
  
  <entry>
    <title>生成新的SSH密钥并将其添加到ssh-agent</title>
    <link href="https://www.sugen.cn/article-2019062301.html"/>
    <id>https://www.sugen.cn/article-2019062301.html</id>
    <published>2019-06-21T16:00:00.000Z</published>
    <updated>2019-06-23T15:26:50.905Z</updated>
    
    <content type="html"><![CDATA[<ol><li>检查现有SSH密钥后，可以生成用于身份验证的新SSH密钥，然后将其添加到ssh-agent。<a id="more"></a></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">1. 检查现有SSH密钥后，可以生成用于身份验证的新SSH密钥，然后将其添加到ssh-agent。</span><br><span class="line"></span><br><span class="line">2. 如果您还没有SSH密钥，则必须生成新的SSH密钥。 如果您不确定是否已有SSH密钥，请检查现有密钥。</span><br><span class="line"></span><br><span class="line">3. 如果您不想在每次使用SSH密钥时重新输入密码，则可以将密钥添加到SSH代理，SSH代理管理您的SSH密钥并记住您的密码。</span><br></pre></td></tr></table></figure><h3 id="生成新的SSH密钥"><a href="#生成新的SSH密钥" class="headerlink" title="生成新的SSH密钥"></a>生成新的SSH密钥</h3><h5 id="1-打开终端"><a href="#1-打开终端" class="headerlink" title="1. 打开终端"></a>1. 打开终端</h5><h5 id="2-粘贴下面的文本，替换您的GitHub电子邮件地址。"><a href="#2-粘贴下面的文本，替换您的GitHub电子邮件地址。" class="headerlink" title="2. 粘贴下面的文本，替换您的GitHub电子邮件地址。"></a>2. 粘贴下面的文本，替换您的GitHub电子邮件地址。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -b 4096 -C“your_email@example.com”</span><br></pre></td></tr></table></figure><h5 id="这将使用提供的电子邮件作为标签创建一个新的ssh密钥。"><a href="#这将使用提供的电子邮件作为标签创建一个新的ssh密钥。" class="headerlink" title="这将使用提供的电子邮件作为标签创建一个新的ssh密钥。"></a>这将使用提供的电子邮件作为标签创建一个新的ssh密钥。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Generating public/private rsa key pair.</span><br></pre></td></tr></table></figure><h5 id="3-当系统提示“输入要保存密钥的文件”时，按Enter键。这接受默认文件位置，如果不想覆盖，可以手动修改文件名。"><a href="#3-当系统提示“输入要保存密钥的文件”时，按Enter键。这接受默认文件位置，如果不想覆盖，可以手动修改文件名。" class="headerlink" title="3. 当系统提示“输入要保存密钥的文件”时，按Enter键。这接受默认文件位置，如果不想覆盖，可以手动修改文件名。"></a>3. 当系统提示“输入要保存密钥的文件”时，按Enter键。这接受默认文件位置，如果不想覆盖，可以手动修改文件名。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter a file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/you/.ssh/id_rsa): [Press enter]</span><br></pre></td></tr></table></figure><h5 id="4-在提示符下，键入安全密码-可以直接回车不设置密码-。"><a href="#4-在提示符下，键入安全密码-可以直接回车不设置密码-。" class="headerlink" title="4. 在提示符下，键入安全密码(可以直接回车不设置密码)。"></a>4. 在提示符下，键入安全密码(可以直接回车不设置密码)。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; Enter passphrase (empty <span class="keyword">for</span> no passphrase): [Type a passphrase]</span><br><span class="line">&gt; Enter same passphrase again: [Type passphrase again]</span><br></pre></td></tr></table></figure><h3 id="将SSH密钥添加到ssh-agent"><a href="#将SSH密钥添加到ssh-agent" class="headerlink" title="将SSH密钥添加到ssh-agent"></a>将SSH密钥添加到ssh-agent</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 在将新的SSH密钥添加到ssh-agent以管理密钥之前，您应该检查现有的SSH密钥并生成新的SSH密钥。</span><br><span class="line">2. 将SSH密钥添加到代理时，请使用默认的macOS ssh-add命令，而不是macports，homebrew或其他外部源安装的应用程序。</span><br></pre></td></tr></table></figure><h5 id="1-在后台启动ssh-agent。"><a href="#1-在后台启动ssh-agent。" class="headerlink" title="1. 在后台启动ssh-agent。"></a>1. 在后台启动ssh-agent。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">eval</span> <span class="string">"<span class="variable">$(ssh-agent -s)</span>"</span></span><br><span class="line">&gt; Agent pid 59566</span><br></pre></td></tr></table></figure><h5 id="2-如果您使用的是macOS-Sierra-10-12-2或更高版本，则需要修改〜-ssh-config文件以自动将密钥加载到ssh-agent中并在密钥链中存储密码。"><a href="#2-如果您使用的是macOS-Sierra-10-12-2或更高版本，则需要修改〜-ssh-config文件以自动将密钥加载到ssh-agent中并在密钥链中存储密码。" class="headerlink" title="2. 如果您使用的是macOS Sierra 10.12.2或更高版本，则需要修改〜/.ssh/config文件以自动将密钥加载到ssh-agent中并在密钥链中存储密码。"></a>2. 如果您使用的是macOS Sierra 10.12.2或更高版本，则需要修改〜/.ssh/config文件以自动将密钥加载到ssh-agent中并在密钥链中存储密码。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">  AddKeysToAgent yes</span><br><span class="line">  UseKeychain yes</span><br><span class="line">  IdentityFile ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><h5 id="3-将SSH私钥添加到ssh-agent并将密码存储在密钥链中。-如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的id-rsa替换为私钥文件的名称。"><a href="#3-将SSH私钥添加到ssh-agent并将密码存储在密钥链中。-如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的id-rsa替换为私钥文件的名称。" class="headerlink" title="3. 将SSH私钥添加到ssh-agent并将密码存储在密钥链中。 如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的id_rsa替换为私钥文件的名称。"></a>3. 将SSH私钥添加到ssh-agent并将密码存储在密钥链中。 如果使用其他名称创建密钥，或者要添加具有不同名称的现有密钥，请将命令中的id_rsa替换为私钥文件的名称。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-add -K ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><blockquote><p>注意：-K选项是Apple的ssh-add标准版本，当你向ssh-agent添加ssh密钥时，它会将密码链存储在你的钥匙串中。如果你没有安装Apple的标准版本，则可能会收到错误消息。</p></blockquote><h5 id="4-将SSH密钥添加到您的GitHub帐户。-不会的看下一篇文章"><a href="#4-将SSH密钥添加到您的GitHub帐户。-不会的看下一篇文章" class="headerlink" title="4. 将SSH密钥添加到您的GitHub帐户。(不会的看下一篇文章)"></a>4. 将SSH密钥添加到您的GitHub帐户。(不会的看下一篇文章)</h5>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;检查现有SSH密钥后，可以生成用于身份验证的新SSH密钥，然后将其添加到ssh-agent。
    
    </summary>
    
      <category term="ssh" scheme="https://www.sugen.cn/categories/ssh/"/>
    
    
      <category term="ssh" scheme="https://www.sugen.cn/tags/ssh/"/>
    
  </entry>
  
</feed>
